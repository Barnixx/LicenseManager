// <auto-generated />
using System;
using LicenseManager.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LicenseManager.Infrastructure.Migrations
{
    [DbContext(typeof(LicenseManagerContext))]
    partial class LicenseManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LicenseManager.Core.Domain.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CompletedAt");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.HasIndex("Email", "Id")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("LicenseManager.Core.Domain.Identity.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("RevokedAt");

                    b.Property<string>("Token");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Id", "Token", "UserId")
                        .IsUnique()
                        .HasFilter("[Token] IS NOT NULL");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("LicenseManager.Core.Domain.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnName("LastLogin");

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("Role");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("Username")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Id", "Email", "UserName")
                        .IsUnique();

                    b.ToTable("Users","app");
                });

            modelBuilder.Entity("LicenseManager.Core.Domain.Licenses.License", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CustomerId");

                    b.Property<string>("HWID");

                    b.Property<string>("IP");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<byte>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Id", "CustomerId")
                        .IsUnique();

                    b.ToTable("Licenses","app");
                });
#pragma warning restore 612, 618
        }
    }
}
